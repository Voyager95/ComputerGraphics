#pragma once
#include <string>
#include <memory>
#include <vector>
#include <gl/glm/glm.hpp>
#include "RenderSystem.h"
#include "ModelInstnce.h"
#include "Component.h"

/// <summary>
/// 오브젝트를 그리는 컴포넌트 입니다.
/// </summary>
class Renderer :
    public Component, public std::enable_shared_from_this<Renderer>
{
public:

private:

    // 모델 설정
    bool isSharedModel;
    std::shared_ptr<ModelInstance> m_Model;

    // 쉐이더 설정
    ShaderType m_TargetShader;
    bool m_IsAssigned;              // 이 렌더러가 렌더시스템에 등록되어 있는지 판단하는 플레그 입니다.


public:
    //--- Constructor
    Renderer(std::shared_ptr<Object> object);
    Renderer(std::shared_ptr<Object> object, std::string objPath);

    //--- Getter
    std::shared_ptr<ModelInstance> GetModel() { return m_Model; }

    //--- Setter
    void SetTargetShader(ShaderType type);

    /// <summary>
    /// ResourceSystem을 통해서 ModelInstance를 가지고 옵니다.
    /// </summary>
    /// <param name="objName">오브젝트의 위치이다</param>
    void SetSharedModel(std::string key);

    /// <summary>
    /// 커스텀 모델을 제공합니다.
    /// </summary>
    /// <param name="model"></param>
    void SetOwnModel(std::shared_ptr<ModelInstance> model);

    //--- Event
    
    /// <summary>
    /// CheckState()
    /// </summary>
    virtual void OnEnable();


    virtual void OnDisable();

private:

    /// <summary>
    /// 현재 Renderer의 설정을 체크합니다. 만일 화면에 그려야하는 경우 RenderSystem의 ShaderInstance에 자기 자신을 등록하여 그리도록합니다.
    /// </summary>
    void CheckState();
};

